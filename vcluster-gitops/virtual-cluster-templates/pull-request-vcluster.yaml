kind: VirtualClusterTemplate
apiVersion: management.loft.sh/v1
metadata:
  name: pull-request-vcluster
spec:
  displayName: Pull Request vCluster
  description: >-
    Intended for ephemeral vClusters for GitHub pull requests and includes an
    Argo CD instance.
  owner:
    team: loft-admins
  template:
    metadata: {}
    instanceTemplate:
      metadata: {}
    pro:
      enabled: true
    helmRelease:
      chart:
        version: 0.20.0
      values: |-
        sync:
          toHost:
            ingresses:
              enabled: true
    accessPoint:
      ingress: {}
    spaceTemplate:
      metadata: {}
  versions:
    - template:
        metadata:
          annotations:
            sleepmode.loft.sh/ignore-user-agents: argo*
        instanceTemplate:
          metadata:
            annotations:
              loft.sh/custom-links: >-
                https://argocd-{{ .Values.loft.virtualClusterName }}.{{
                .Values.loft.clusterAnnotations.domain }}
        apps:
          - name: argocd
            version: 2.12.1
            namespace: argocd
            parameters: |
              appValues: |
                global:
                  domain: argocd-{{ .Values.loft.virtualClusterName }}.{{ .Values.loft.clusterAnnotations.domain }}
                configs:
                  cm:
                    create: true
                    application.resourceTrackingMethod: annotation
                    oidc.config: |
                       issuer: https://{{ .Values.loft.clusterAnnotations.domainPrefix }}.{{ .Values.loft.clusterAnnotations.domain }}/oidc
                       clientID: argocd-{{ .Values.loft.virtualClusterName }}
                       clientSecret: $oidc-secret:clientSecret
                       Name: Loft
                  params:
                    "server.insecure": true
                    timeout.reconciliation: 0 
                  rbac:
                    policy.csv: |-
                      g, Administration, role:admin
                      g, Sales, role:admin
                      g, Engineering, role:admin
                server:
                  ingress:
                    enabled: true
                    annotations:
                      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
                    ingressClassName: "nginx"
                    hostname: argocd-{{ .Values.loft.virtualClusterName }}.{{ .Values.loft.clusterAnnotations.domain }}
                    tls: true
                  ingressGrpc:
                    enabled: false
                ## ApplicationSet controller
                applicationSet:
                  enabled: true
                  logLevel: "debug"
                  ingress:
                    enabled: true
                    ingressClassName: "nginx"
                    annotations:
                      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
                    hostname: argocd-appset-{{ .Values.loft.virtualClusterName }}.{{ .Values.loft.clusterAnnotations.domain }}
                    tls: true
                notifications:
                  argocdUrl: https://argocd-{{ .Values.loft.virtualClusterName }}.{{ .Values.loft.clusterAnnotations.domain }}
                  cm:
                    create: true
                  context:
                    helloAppUrl: "https://{{ .Values.loft.virtualClusterName }}.{{ .Values.loft.clusterAnnotations.domain }}"
                  logLevel: "debug"
                  secret:
                    labels:
                      loft.sh/project-secret-name: argocd-notifications-secret
          - name: argo-cd-pr-application-set
            namespace: argocd
            parameters: |
              argocdUrl: >-
                https://argocd-{{ .Values.loft.virtualClusterName }}.{{
                .Values.loft.clusterAnnotations.domain }}
              vClusterName: '{{ .Values.loft.virtualClusterName }}'
              repoName: '{{ .Values.reponame }}'
        objects: |-
          apiVersion: v1
          kind: Namespace
          metadata:
            name: argocd
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: loft-demo-org-cred
            namespace: argocd
            labels:
              loft.sh/project-secret-name: loft-demo-org-cred
              argocd.argoproj.io/secret-type: repo-creds
          type: Opaque
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: oidc-secret
            namespace: argocd
            labels:
              loft.sh/project-secret-name: oidc-secret
              app.kubernetes.io/part-of: argocd
          type: Opaque
          ---
          apiVersion: v1
          kind: Namespace
          metadata:
            name: preview-hello-world-app
          ---
          apiVersion: v1
          kind: Secret
          metadata:
            name: ghcr-login-secret
            namespace: preview-hello-world-app
            labels:
              loft.sh/project-secret-name: ghcr-login-secret
          data:
            .dockerconfigjson: e30K
          type: kubernetes.io/dockerconfigjson
        pro:
          enabled: true
        helmRelease:
          chart:
            version: 0.20.2
          values: |-
            external:
              platform:
                autoSleep:
                  afterInactivity: 7200
                autoDelete:
                  afterInactivity: 720000
            sync:
              toHost:
                ingresses:
                  enabled: true

            controlPlane:
              # Use an embedded managed etcd server instead of using the k3s default SQLite backend
              backingStore:
                etcd:
                  embedded:
                    enabled: true
              distro:
                k8s:
                  apiServer:
                    image:
                      tag:  "{{ .Values.k8sVersion }}"
                  controllerManager:
                    image:
                      tag: "{{ .Values.k8sVersion }}"
              coredns:
                embedded: true

            experimental:
              syncSettings:
                syncLabels:
                  - "app.kubernetes.io/part-of"
        accessPoint:
          ingress: {}
        spaceTemplate:
          metadata: {}
      parameters:
        - variable: k8sVersion
          label: k8sVersion
          description: Please select Kubernetes version
          options:
            - v1.30.2
            - v1.29.8
            - v1.28.11
            - v1.27.9
            - v1.26.15
          defaultValue: v1.29.8
        - variable: prnumber
          label: PR Number
          type: string
          defaultValue: '1'
        - variable: reponame
          label: Repo Name
          type: string
          defaultValue: hello-app
      version: 1.0.0
status: {}
